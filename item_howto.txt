Item files are defined in JSON using the standard JSON syntax (ECMA-404 Standard). I reccomend you read the json standard at http://www.json.org/ . Items are stored with a .item extention to identify them as such in extentions. I will describe the function and name of attributes stored in the item file shortly.
The 'name' field gives the short, human-friendly name of the the item. It's counterpart, the 'id' field gives the unique, machine-friendly name of the item. Additionally, the 'mount_type' field is used to restrict the slots that the item can be mounted into. It must exactly match the 'size' field of the hardpoint you are trying to mount the item to to be able to mount it, although you can mount an item using hacks into a non-fitting hardpoint.
The 'inventory_image' and 'equipped_image' fields describe the image to be shown in the inventory UI and when it is on the ship, respectivley. The 'cost' field gives the cumulative cost of 'count' of the items. The cost of one item is 'cost'/'count.' 'mass' describes the additional mass the item adds to a ship.
The use of the 'rarity' field is described in rarity_howto.txt
The field 'ai_priority' is supposed to describe the importance of using this weapon in combat, but is currently broken.
The fields 'fire_events', 'equip' and 'dequip' are all lists of primitives, described in primitive_howto.txt
'required' is a dictionary where each item is a limit on when the item can be fired. If 'energy' is defined, the item consumes that much energy when fired. If 'enemy_selected' is True, you need a enemy targeted to fire the item. 'cooldown' limits the firings to be at least that amount apart. 'item' means that firing the item consumes one of those items. 'distance<' means that the target has to be within that number of pixels of the target (requires 'enemy_selected' to be set.)

http://jsonviewer.codeplex.com/